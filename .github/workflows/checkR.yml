name: Building Faster R CI

on:
  workflow_dispatch:
  #   inputs:
  #     extra-packages:
  #       description: 'Any extra packages to install outside of the packages listed in the dependencies'
  #     needs:
  #       description: 'Any extra Config/Needs fields which need to be included when installing dependencies'
  #     packages:
  #       description: 'Which package(s) to install.'
  #       default: 'deps::., any::sessioninfo'
  #     pak-version:
  #       description: 'Which pak version to use. Possible values are "stable", "rc" and "devel".'
  #       default: 'stable'
  #     working-directory:
  #       description: 'Using the working-directory keyword, you can specify the working directory of where "pkg_deps" command searches for dependencies in the "DESCRIPTION" file.'
  #       default: '.'
  #     dependencies:
  #       description: 'Types of dependencies to install. Must be an R expression. Note that it often needs to be quoted in YAML, see the README for details.'
  #       default: '"all"'
  #     upgrade:
  #       description: 'Whether to install the latest available versions of the dependencies. Must be an R expression. See the README for details if you need quoting.'
  #       default: 'FALSE'
  push:
    branches:
      - "R-test"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    container: bahadzie/alpine-r-pandoc:4.3.0.4
    steps:
      # - run: R --version

      # - name: Set site library path
      #   run: |
      #     # Set site library path
      #     cat("::group::Set site library path\n")
      #     if (Sys.getenv("RENV_PROJECT") != "") {
      #       message("renv project detected, no need to set R_LIBS_SITE")
      #       cat(sprintf("R_LIB_FOR_PAK=%s\n", .libPaths()[1]), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
      #       q("no")
      #     }
      #     lib <- Sys.getenv("R_LIBS_SITE")
      #     if (lib == "") {
      #       lib <- file.path(dirname(.Library), "site-library")
      #       cat(sprintf("R_LIBS_SITE=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
      #       cat(sprintf("R_LIB_FOR_PAK=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
      #       message("Setting R_LIBS_SITE to ", lib)
      #     } else {
      #       message("R_LIBS_SITE is already set to ", lib)
      #       cat(sprintf("R_LIB_FOR_PAK=%s\n", strsplit(lib, .Platform$path.sep)[[1]][[1]]), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
      #     }
      #     cat("::endgroup::\n")
      #   shell: Rscript {0}

      # - name: Install pak (Unix)
      #   if: runner.os != 'Windows'
      #   id: pak
      #   run: |
      #     # Install pak
      #     cat("::group::Install pak\n")
      #     dir.create(Sys.getenv("R_LIB_FOR_PAK"), recursive = TRUE, showWarnings = FALSE)
      #     install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s",  .Platform$pkgType,  R.Version()$os,  R.Version()$arch), lib = Sys.getenv("R_LIB_FOR_PAK"))
      #     cat("r-version=", R.version.string, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
      #     cat("::endgroup::\n")
      #   shell: Rscript {0}

      # - name: Install pak (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     # Install pak
      #     cat("::group::Install pak\n")
      #     lib <- Sys.getenv("R_LIB_FOR_PAK")
      #     dir.create(lib, showWarnings = FALSE, recursive = TRUE)
      #     install.packages("pak", repos = "https://r-lib.github.io/p/pak/${{ inputs.pak-version }}/", lib = lib)
      #     cat("::endgroup::\n")
      #   shell: Rscript {0}

      # - name: Cache R Packages
      #   uses: actions/cache@v3
      #   id: package-cache
      #   with:
      #     path: |
      #       ${{ env.R_LIBS_USER }}/*
      #       !${{ env.R_LIBS_USER }}/pak
      #     key: ${{ format('{0}-{1}-{2}', runner.os, steps.pak.outputs.r-version, hashFiles(format('{0}/.github/pkg.lock', inputs.working-directory ))) }}
      #     # restore-keys: ${{ steps.install.outputs.os-version }}-${{ steps.install.outputs.r-version }}-${{inputs.cache-version }}-

      # - name: Install Dependencies
      #   if: steps.package-cache.outputs.cache-hit != 'true'
      #   run: |
      #     # pak::pak("any::rmarkdown")
      #     # Install/Update packages
      #     cat("::group::Install packages\n")
      #     pak::lockfile_create(
      #       "any::rmarkdown",
      #       lockfile = ".github/pkg.lock"
      #     )
      #     Sys.setenv("PKGCACHE_HTTP_VERSION" = "2")
      #     library(pak, lib.loc = Sys.getenv("R_LIB_FOR_PAK"))
      #     pak::lockfile_install(".github/pkg.lock")
      #     ## Clean up lock file
      #     unlink(".github/pkg.lock")
      #     cat("::endgroup::\n")
      #   shell: Rscript {0}
      - name: Checkout repos
        uses: actions/checkout@v3

      - name: Temp Fix. https://github.com/peter-evans/create-pull-request/issues/1170
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
        

      - name: Compile the readme
        run: |
          writeLines(
            knitr::knit_expand(
              "README.Rmd",
              packagename = read.dcf("DESCRIPTION", "Package"),
              institution = read.dcf("DESCRIPTION", "Config/Institution"),
              department = read.dcf("DESCRIPTION", "Config/Department"),
              department_url = read.dcf("DESCRIPTION", "Config/DepartmentURL"),
              recon = read.dcf("DESCRIPTION", "Config/Recon"),
              recon_description = read.dcf("DESCRIPTION", "Config/ReconDescription"),
              gh_repo = Sys.getenv("GITHUB_REPOSITORY")
            ),
            "README_expanded.Rmd"
          )
          rmarkdown::render(
            "README_expanded.Rmd",
            output_file = "README.md",
            output_dir = "."
          )
        shell: Rscript {0}

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          # Also add README figures if they exist
          if [ -d man/figures ]
          then
            git add man/figures/
          fi
          git diff-index --quiet HEAD || git commit -m "Automatic readme update"
          git push origin R-test || echo "No changes to push"




    # steps:
    #   -
    #     name: Checkout
    #     uses: actions/checkout@v3
    #   -
    #     name: Login to Docker Hub
    #     uses: docker/login-action@v2
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}
    #   -
    #     name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v2
    #   -
    #     name: Build and push
    #     uses: docker/build-push-action@v4
    #     with:
    #       context: .
    #       file: ./Dockerfile
    #       push: true
    #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/alpine-r-pandoc:4.3.0


# name: ðŸŽ¨ Test Visual Regression

# on: workflow_call

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     container: drizzt99/vonage:1.2.0
#     steps:
#       - run: echo "Running 1.2.0"

#       - uses: actions/checkout@v3

#       - uses: actions/setup-node@v3
#         with:
#           node-version: '16'
#           cache: 'npm'

#       - run: apt-get install tar -y

#       - uses: actions/cache@v3
#         id: cache
#         with:
#           path: node_modules/
#           key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

#       - name: Install Dependencies
#         if: steps.cache.outputs.cache-hit != 'true'
#         run: npm ci

#       - run: npm run nx e2e components -- --task=local
#       - uses: actions/upload-artifact@v3
#         with:
#           name: visual-regression-artifact
#           path: test-results/